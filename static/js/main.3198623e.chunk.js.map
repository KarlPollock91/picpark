{"version":3,"sources":["utils/constants.js","components/thumbnails/Avatar.js","components/secondary/Loading.js","components/thumbnails/ServerThumbnail.js","components/main/LeftSidebar.js","components/thumbnails/PostThumbnail.js","components/thumbnails/NewPostThumbnail.js","components/main/Main.js","components/thumbnails/UserThumbnail.js","components/main/RightSidebar.js","components/main/Login.js","components/main/ServerCreation.js","components/main/PostCreation.js","components/thumbnails/CommentThumbnail.js","components/secondary/CommentSection.js","components/main/ViewPost.js","components/main/ViewProfile.js","components/main/ViewServer.js","components/main/SplashPage.js","components/main/App.js","index.js"],"names":["SERVER_URL","USER_STATUS","Avatar","props","useState","avatarDataId","setAvatarDataId","useEffect","avatarPostId","axios","get","Constants","headers","localStorage","getItem","then","res","status","data","dataId","catch","err","alt","style","borderRadius","objectFit","height","large","width","className","src","localPreview","process","Loading","React","Component","ServerThumbnail","navigate","useNavigate","server","setServer","serverId","serverObject","newServer","permissionObject","serverName","DropdownButton","title","id","variant","size","onSelect","e","_id","Dropdown","Item","eventKey","LeftSidebar","permissions","setPermissions","userId","type","onClick","map","el","i","PostThumbnail","postObject","NewPostThumbnail","Main","postIds","setPostIds","loadedPosts","setLoadedPosts","params","useParams","serverSecurities","setServerSecurities","userPermissions","setUserPermissions","loadedSecurities","setLoadedSecurities","allowJoin","fd","FormData","post","refreshLeftSidebar","UserThumbnail","profile","setProfile","setUserId","serverPermission","setServerPermission","profileObject","userThumbnail","username","changeRankCallback","userPermission","RightSidebar","logoutCallback","userInfo","Login","registrationMode","setRegistrationMode","usernameInput","setUsernameInput","passwordInput","setPasswordInput","confirmPasswordInput","setConfirmPasswordInput","accountNameInput","setAccountNameInput","errorText","setErrorText","createRef","formRef","toggleRegistrationMode","maxLength","value","onInput","target","placeholder","Form","action","method","encType","Group","controlId","a","Control","name","ref","append","current","files","split","response","accountName","password","setItem","token","verifyAuth","ServerCreation","nameInput","setNameInput","finishServerCreation","PostCreation","textInput","setTextInput","exitPostCreation","CommentThumbnail","author","setAuthor","commentObject","authorId","deleteCommentCallback","commentText","CommentSection","comments","setComments","updateComments","setUpdateComments","newComment","setNewComment","errorMessage","setErrorMessage","postId","deleteComment","commentId","delete","makeComment","rows","onKeyDown","keyCode","shiftKey","preventDefault","ViewPost","setPost","displayPostText","setDisplayPostText","editMode","setEditMode","date","setDate","Date","postText","exitViewPost","dataType","toDateString","ViewProfile","updateProfile","setUpdateProfile","madeChanges","setMadeChanges","editUsername","setEditUsername","hoverOverAvatar","setHoverOverAvatar","previewAvatar","setPreviewAvatar","userServers","setUserServers","loadedServers","setLoadedServers","userSecurities","setUserSecurities","useRef","securitySettingEvent","updatedSecurities","serversVisibility","onMouseOver","onMouseLeave","click","onChange","reader","FileReader","onload","result","readAsDataURL","display","Tabs","defaultActiveKey","Tab","Label","Check","label","checked","refreshRightSidebar","ViewServer","updateServer","setUpdateServer","setUserPermission","editServerName","setEditServerName","serverUsers","setServerUsers","loadedUsers","setLoadedUsers","postsVisibility","setPostsVisibility","setAllowJoin","allowComment","setAllowComment","usersVisibility","setUsersVisibility","showLeaveModal","setShowLeaveModal","leaveModalStage","setLeaveModalStage","showRankModal","setShowRankModal","rankModalProfile","setRankModalProfile","rankRadio","setRankRadio","permission","openChangeRankModal","changeRankModalRadio","Modal","show","onHide","Body","Footer","Button","disabled","SplashPage","App","loading","setLoading","loggedIn","setLoggedIn","setUserInfo","clear","setNewServer","newUser","setNewUser","path","element","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.3198623e.chunk.js","sourcesContent":["//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\nexport const SERVER_URL = \"https://picpark.herokuapp.com\"\r\nexport const USER_STATUS = {\r\n    0: \"Banned\",\r\n    1: \"Non-Member\",\r\n    2: \"Member\",\r\n    3: \"Member+\",\r\n    4: \"Moderator\",\r\n    5: \"Admin\"\r\n}","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//Avatar.js is a component used in thumbnails to display an image from the server in an avatar format.\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport '../css/Thumbnail.css';\r\nimport axios from 'axios'\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction Avatar(props) {\r\n\r\n    const [avatarDataId, setAvatarDataId] = useState();\r\n\r\n    //Component hook to retrieve the image from the server.\r\n    useEffect(() => {\r\n        if (props.avatarPostId != null) {\r\n            axios.get(`${Constants.SERVER_URL}/files/getImageFromPost/${props.avatarPostId}`, {headers: \r\n                {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setAvatarDataId(res.data.dataId);\r\n                }\r\n            }).catch((err) => {\r\n            });\r\n        }\r\n    }, [props.avatarPostId]);\r\n\r\n    return(\r\n        <img alt=\"User avatar\" style={{borderRadius:'50%', objectFit:'cover', height: props.large ? '150px' : '50px', width: props.large ? '150px' : '50px'}} \r\n            className=\"thumbnail-image\" \r\n            src={props.localPreview ? props.localPreview :\r\n                (avatarDataId ? `${Constants.SERVER_URL}/files/image/${avatarDataId}` : `${process.env.PUBLIC_URL}/images/server_default.png`)}/>\r\n    );\r\n}\r\n\r\nexport default Avatar;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//A simple loading screen with a loading bar.\r\n//Loading bar is an open source design from:\r\n//Copyright (c) 2022 by Daria Koutevska (https://codepen.io/DariaIvK/pen/EpjPRM)\r\n\r\nimport React from 'react';\r\nimport '../css/Loading.css'\r\n\r\nclass Loading extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default Loading;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//ServerThumbnail.js is a component that displays a server name, avatar and provides options to visit the Server Information or Main\r\n//components for the server.\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport * as Constants from '../../utils/constants';\r\nimport {Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport Avatar from '../thumbnails/Avatar';\r\nimport Loading from '../secondary/Loading';\r\n\r\nimport '../css/Thumbnail.css';\r\n\r\nfunction ServerThumbnail(props) {\r\n\r\n    const navigate = useNavigate();\r\n    const [server, setServer] = useState({});\r\n\r\n    //Component hook to retrieve the server information.\r\n    useEffect(() => {\r\n        if (props.serverId != null) {\r\n            axios.get(`${Constants.SERVER_URL}/servers/getServer/${props.serverId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200){\r\n                    setServer(res.data.serverObject); \r\n                }\r\n            }).catch((err) => {\r\n                //do nothing\r\n            });\r\n        }\r\n    }, [props.serverId, props.newServer, props.permissionObject]);\r\n\r\n\r\n    //Handles selection of the dropdown menu.\r\n    const handleSelect = (e) => {\r\n        if (e === \"view\"){\r\n            navigate(`/picpark/serverInfo/${server._id}`);\r\n        } else if (e === \"visit\") {\r\n            navigate(`/picpark/s/${server._id}`);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container thumbnail-wrapper w-90 my-1\">\r\n           {server ?\r\n                <div className=\"row h-100\">\r\n                    <div className=\"col-md-4 my-auto\">\r\n                        <Avatar avatarPostId={server.avatarPostId}/>\r\n                    </div>\r\n                    <div className=\"col-md-6 my-auto\">\r\n                        {server.serverName}\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <DropdownButton className=\"m-2\" title=\"\" id=\"dropdown-basic-button\" variant=\"secondary\" size=\"sm\" onSelect={handleSelect}>\r\n                            <Dropdown.Item eventKey=\"visit\">Visit Server</Dropdown.Item>\r\n                            <Dropdown.Item eventKey=\"view\">Server Information</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </div>\r\n                </div>\r\n            : <Loading/>}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ServerThumbnail;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//LeftSidebar.js is the component that shows all of the servers the user is currently a member of on the left side of the screen.\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ServerThumbnail from '../thumbnails/ServerThumbnail';\r\nimport axios from 'axios'\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction LeftSidebar(props) {\r\n\r\n    const navigate = useNavigate();\r\n    const [permissions, setPermissions] = useState([]);\r\n\r\n    //Component hook that retrieves all of the servers the user is a member of.\r\n    useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/accounts/userServers/${props.userId}`, {headers: \r\n            {\r\n            \"x-access-token\": localStorage.getItem(\"authToken\")\r\n            }\r\n        })\r\n        .then((res) => {\r\n            setPermissions(res.data.permissions);\r\n        });\r\n    }, [props.newServer, props.userId]);\r\n\r\n    //Sends the user to the create server screen.\r\n    const newServer = () => {\r\n        navigate(`/picpark/createServer`);\r\n    }\r\n\r\n    return(\r\n        <div className=\"w-100\">\r\n            <button type=\"button\" className=\"w-100 btn btn-outline-primary mt-2\" onClick={newServer}><i className=\"bi bi-plus-circle\"></i> Create new server</button>\r\n            <ul className=\"list-group\">\r\n                {permissions.map((el, i) => (\r\n                    <ServerThumbnail newServer={props.newServer} key={el._id} serverId={el.serverId}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n    \r\n} \r\n\r\nexport default LeftSidebar;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//Post thumbnail displays the image of a post in a smaller format. Clicking the thumbnail will take the user\r\n//to the View Post component of that post.\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Constants from '../../utils/constants';\r\nimport '../css/ImageThumbnail.css';\r\n\r\nfunction PostThumbnail(props) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    //Sends the user to the View Post component for this post.\r\n    const viewPost = () => {\r\n        navigate(`/picpark/v/${props.postObject.serverId}/${props.postObject._id}`);\r\n    }\r\n\r\n    return(\r\n        <div className=\"col-md-3\">\r\n            <div className=\"grid-item border border-secondary\" onClick={viewPost}>\r\n                <img alt=\"Preview of a user post\" className=\"image-thumbnail\" src={`${Constants.SERVER_URL}/files/image/${props.postObject.dataId}`}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostThumbnail;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//Simply displays an image that when clicked sends the user to the Post Creation component.\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport '../css/ImageThumbnail.css';\r\n\r\nfunction NewPostThumbnail(props) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    //Sends the user to the post creation component.\r\n    const newPost = () => {\r\n        navigate(`/picpark/post/${props.serverId}`);\r\n    }\r\n\r\n    return(\r\n        <div className=\"col-md-3\" onClick={newPost}>\r\n            <div className=\"grid-item border border-secondary\">\r\n                <img alt=\"Create new post button\" className=\"image-thumbnail\" src={`${process.env.PUBLIC_URL}/images/new_post.png`}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPostThumbnail;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//Main.js contains the main view for servers in which users can view posts and create new ones.\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport {useNavigate, useParams } from \"react-router-dom\";\r\nimport axios from 'axios'\r\n\r\nimport '../css/Main.css'\r\nimport * as Constants from '../../utils/constants';\r\n\r\nimport ServerThumbnail from '../thumbnails/ServerThumbnail';\r\nimport PostThumbnail from '../thumbnails/PostThumbnail'\r\nimport NewPostThumbnail from '../thumbnails/NewPostThumbnail';\r\nimport Loading from '../secondary/Loading';\r\n\r\nfunction Main(props) {\r\n    const [postIds, setPostIds] = useState();\r\n    const [loadedPosts, setLoadedPosts] = useState(false);\r\n\r\n    const params = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [serverSecurities, setServerSecurities] = useState();\r\n    const [userPermissions, setUserPermissions] = useState(0);\r\n    const [loadedSecurities, setLoadedSecurities] = useState(false);\r\n\r\n    //Component hook to retrieve all the posts currently on this server.\r\n    useEffect(() => {\r\n            axios.get(`${Constants.SERVER_URL}/servers/getPosts/${params.serverId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                setLoadedPosts(true);\r\n                if (res.status === 200) {\r\n                    setPostIds(res.data);\r\n                } else if (res.status === 404) {\r\n                    navigate('/picpark')\r\n                }\r\n            }).catch((err) => {\r\n                setLoadedPosts(true);\r\n            });\r\n    }, [navigate, params.serverId]);\r\n\r\n    //Component hook that retrieves the security settings of the current server.\r\n    useEffect(() => {\r\n            axios.get(`${Constants.SERVER_URL}/servers/serverSecurities/${params.serverId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setServerSecurities(res.data.serverSecurities);\r\n                    setUserPermissions(res.data.permissions);\r\n                    setLoadedSecurities(true);\r\n                }\r\n            })\r\n    }, [params.serverId]);\r\n\r\n    //Adds the current user as a member of the server.\r\n    const joinServer = () => {\r\n        const fd = new FormData();\r\n        axios.post(`${Constants.SERVER_URL}/servers/joinServer/${params.serverId}`, fd, {headers: \r\n            {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n            }\r\n        })\r\n        .then((res) => {\r\n            if (res.status === 200) {\r\n                props.refreshLeftSidebar();\r\n                setUserPermissions(2);\r\n            }\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <ServerThumbnail serverId={params.serverId}/>\r\n                </div>\r\n                <div className=\"text-center align-middle col-md-6\">\r\n                    {loadedSecurities ?\r\n                        ((userPermissions === 1) && (serverSecurities.allowJoin === 0)) ?\r\n                            <button type=\"button\" onClick={joinServer} className=\"px-5 my-2 btn-lg btn-outline-primary\">Join Server</button>\r\n                        : <div className=\"my-3\"> Status: {Constants.USER_STATUS[userPermissions]} </div>\r\n                    : \"\"}\r\n                </div>\r\n            </div>\r\n             \r\n            <div className=\"row gy-4 mx-auto pt-3\">\r\n                {loadedSecurities && userPermissions >= 2 ?\r\n                    <NewPostThumbnail serverId={params.serverId}/>\r\n                : \"\"}\r\n                {postIds ?\r\n                        postIds.map((el, i) => (\r\n                            <PostThumbnail postObject={el} key={el._id}/>\r\n                        ))\r\n                : (loadedPosts ? \"You do not have permission to view these posts\" : <Loading/>)}\r\n            </div> \r\n            \r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Main;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//UserThumbnail.js is a component that displays a username, avatar and provides options to visit the View Profile or Main\r\n//components for the user.\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {Dropdown, DropdownButton} from 'react-bootstrap';\r\n\r\nimport Avatar from '../thumbnails/Avatar';\r\nimport Loading from '../secondary/Loading';\r\nimport '../css/Thumbnail.css';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction UserThumbnail(props) {\r\n\r\n    const [profile, setProfile] = useState(null);\r\n    const [userId, setUserId] = useState(null);\r\n    const [serverPermission, setServerPermission] = useState(null);\r\n    const navigate = useNavigate();\r\n    \r\n\r\n   //Component hook to retrieve the user profile.\r\n    useEffect(() => {\r\n        if (props.userId != null) {\r\n            axios.get(`${Constants.SERVER_URL}/accounts/getUser/${props.userId}`, {headers: \r\n                {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200){\r\n                    setProfile(res.data.profileObject);\r\n                    setUserId(res.data.userId);\r\n                }\r\n            }).catch((err) => {\r\n                //do nothing\r\n            });;\r\n        }\r\n    }, [props.serverId, props.userThumbnail, props.userId]);\r\n\r\n    //Component hook to retrieve the permissions the user has in relation to a specific server.\r\n    useEffect(() => {\r\n        if (props.serverId && props.userId != null) {\r\n            axios.get(`${Constants.SERVER_URL}/servers/userPermissions/${props.serverId}/${props.userId}`, {headers: \r\n                {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200){\r\n                    setServerPermission(res.data.permissions);\r\n                }\r\n            });\r\n        }\r\n    }, [props.serverId, props.userId]);\r\n\r\n    //Handles the drop down menu for the post.\r\n    const handleSelect = (e) => {\r\n        if (e === \"view\"){\r\n            navigate(`/picpark/profile/${profile._id}`);\r\n        } else if (e === \"status\") {\r\n            props.changeRankCallback(profile._id, profile.username, serverPermission);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container thumbnail-wrapper w-90\">\r\n           {profile ?\r\n                <div className=\"row h-100\">\r\n                    <div className=\"col-md-4 my-auto\">\r\n                        <Avatar avatarPostId={profile.avatarPostId}/>\r\n                    </div>\r\n                    <div className=\"col-md-6 my-auto\">\r\n                        <div className=\"row\">\r\n                            {profile.username}\r\n                        </div>\r\n                        {serverPermission ? \r\n                            <div className=\"row\">\r\n                                {Constants.USER_STATUS[serverPermission]}\r\n                            </div>\r\n                        : \"\"}\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <DropdownButton className=\"m-2\" title=\"\" id=\"dropdown-basic-button\" variant=\"secondary\" size=\"sm\" onSelect={handleSelect}>\r\n                            <Dropdown.Item eventKey=\"view\">View Profile</Dropdown.Item>\r\n                            {(props.serverId) && (props.userPermission >= 4) && (props.userPermission >= serverPermission) && (userId !== profile._id) ?\r\n                                <Dropdown.Item eventKey=\"status\">Change User Rank</Dropdown.Item> \r\n                                : \"\"\r\n                            }\r\n                        </DropdownButton>\r\n                    </div>\r\n                </div>\r\n            : <Loading/>}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default UserThumbnail;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//RightSidebar.js is the component that contains the log out button as well as a link to the current user's profile\r\n\r\nimport React, {useState} from 'react';\r\nimport UserThumbnail from '../thumbnails/UserThumbnail';\r\n\r\nfunction RightSidebar(props) {\r\n\r\n    return(\r\n\r\n        <div className=\"w-100\">\r\n            <ul className=\"list-group\">\r\n                <button type=\"button\" className=\"btn btn-outline-primary w-100 mt-2\" onClick={props.logoutCallback}>Log out</button>\r\n\r\n                <UserThumbnail userId={props.userInfo._id} key={props.userInfo._id}/>\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n    \r\n} \r\n\r\nexport default RightSidebar;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//Login.js contains the component that handles both login and registration for new users.\r\n\r\nimport React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction Login(props) {\r\n    const [registrationMode, setRegistrationMode] = useState(false);\r\n    const [usernameInput, setUsernameInput] = useState('');\r\n    const [passwordInput, setPasswordInput] = useState('');\r\n    const [confirmPasswordInput, setConfirmPasswordInput] = useState('');\r\n    const [accountNameInput, setAccountNameInput] = useState('');\r\n    const [errorText, setErrorText] = useState('');\r\n    const [formRef] = useState(React.createRef());\r\n    \r\n    //Toggles the display between login mode and registration mode.\r\n    const toggleRegistrationMode = () => {\r\n        if (!registrationMode) {\r\n        setRegistrationMode(true);\r\n        } else {\r\n            setRegistrationMode(false);\r\n        }\r\n        setErrorText('');\r\n    }\r\n\r\n    //Sends the inputted information to the server in order to generate an account.\r\n    const handleRegistration = () => {\r\n        if (passwordInput === confirmPasswordInput ){\r\n\r\n            const fd = new FormData();\r\n\r\n            fd.append(\"username\", usernameInput);\r\n            fd.append(\"password\", passwordInput);\r\n            fd.append(\"accountName\", accountNameInput);\r\n\r\n            if (formRef.current.files[0] && formRef.current.files[0].name) {\r\n                fd.append('file-upload', formRef.current.files[0], formRef.current.files[0].name);\r\n            }\r\n\r\n            if ((!formRef.current.files[0]) || (formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n                axios.post(`${Constants.SERVER_URL}/accounts/register`, fd, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'}\r\n                    })\r\n                .then((res) => {\r\n                    if (res.status === 200) {\r\n                        toggleRegistrationMode();\r\n                        setErrorText(\"Registration successful.\")\r\n                    } \r\n                })\r\n                .catch((err) => {\r\n                    if (err.response.status === 400) {\r\n                        setErrorText(\"That account name is already in use.\")\r\n                    } else {\r\n                        setErrorText(\"Something went wrong.\")\r\n                    }\r\n                });\r\n            } else {\r\n                setErrorText(\"Only image files can be set as your avatar.\")\r\n            };\r\n        } else {\r\n            setErrorText(\"Your password does not match.\")\r\n        }\r\n    }\r\n\r\n    //Sends the information to the server to verify for logging in.\r\n    const handleLogin = () => {\r\n        const data = {\r\n            accountName: accountNameInput,\r\n            password: passwordInput\r\n        };\r\n\r\n        axios.post(`${Constants.SERVER_URL}/accounts/login`, data, {\r\n            headers: {\r\n                'Content-Type': 'application/json'}\r\n            })\r\n        .then((res) => {\r\n            if (res.status === 200) {\r\n                localStorage.setItem(\"authToken\", res.data.token);\r\n                props.verifyAuth();\r\n            } \r\n        })\r\n        .catch((err) => {\r\n            if (err.response.status === 401) {\r\n                setErrorText(\"Invalid account name or password.\")\r\n            } else{\r\n                setErrorText(\"Something went wrong.\")\r\n            }\r\n        });\r\n    }\r\n\r\n    if (!registrationMode){\r\n        return (\r\n            <div className=\"input-form-wrapper text-center w-50 container my-5\">\r\n                <div className=\"row\">{errorText}</div>\r\n                <div className=\"input-group mb-3 row\">\r\n                    <input type=\"text\" value={accountNameInput} onInput={e => setAccountNameInput(e.target.value)} className=\"form-control\" placeholder=\"Account Name\" aria-label=\"Account Name\" aria-describedby=\"basic-addon1\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3 row\">\r\n                    <input type=\"text\" value={passwordInput} onInput={e => setPasswordInput(e.target.value)} className=\"form-control\" placeholder=\"Password\" aria-label=\"Password\" aria-describedby=\"basic-addon1\"/>\r\n                </div>\r\n                <button type=\"button row\" onClick={handleLogin} className=\"btn btn-outline-primary\">Login</button>\r\n                <div className=\"user-select-none row\" onClick={toggleRegistrationMode}>Register new account</div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"input-form-wrapper text-center w-50 container my-5\">\r\n                <div className=\"row\">{errorText}</div>\r\n                <div className=\"input-group mb-3 row\">\r\n                    <input type=\"text\" maxLength={20} value={usernameInput} onInput={e => setUsernameInput(e.target.value)} id=\"reg-username\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3 row\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\">@</span>\r\n                    <input type=\"text\" value={accountNameInput} onInput={e => setAccountNameInput(e.target.value)} className=\"form-control\" placeholder=\"Account Name\" aria-label=\"Account Name\" aria-describedby=\"basic-addon1\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3 row\">\r\n                    <input type=\"text\" value={passwordInput} onInput={e => setPasswordInput(e.target.value)} className=\"form-control\" placeholder=\"Password\" aria-label=\"Password\" aria-describedby=\"basic-addon1\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3 row\">\r\n                    <input type=\"text\" value={confirmPasswordInput} onInput={e => setConfirmPasswordInput(e.target.value)} className=\"form-control\" placeholder=\"Confirm Password\" aria-label=\"Confirm Password\" aria-describedby=\"basic-addon1\"/>\r\n                </div>\r\n                <Form className=\"row\" action=\"/file\" method=\"post\" encType=\"multipart/form-data\">\r\n                        <Form.Group controlId=\"formFile\" className=\"mb-3\" a>\r\n                            <Form.Control type=\"file\" name=\"file-upload\" ref={formRef}/>\r\n                        </Form.Group>\r\n                </Form>\r\n                <button type=\"button\" onClick={handleRegistration} className=\"btn btn-outline-primary row\">Register</button>\r\n                <div className=\"user-select-none row\" onClick={toggleRegistrationMode}>Return to login</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//ServerCreation.js holds the component for creating a new server.\r\n\r\nimport React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction ServerCreation(props) {\r\n\r\n    const [nameInput, setNameInput] = useState('');\r\n    const [errorText, setErrorText] = useState('');\r\n    const [formRef] = useState(React.createRef());\r\n    const navigate = useNavigate();\r\n\r\n    //Sends input forms to server to generate a user server.\r\n    const handleCreation = () => {\r\n        const fd = new FormData();\r\n\r\n        fd.append(\"serverName\", nameInput);\r\n        \r\n\r\n        if (formRef.current.files[0] && formRef.current.files[0].name) {\r\n            fd.append('file-upload', formRef.current.files[0], formRef.current.files[0].name);\r\n        }\r\n\r\n        if ((!formRef.current.files[0]) || (formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n            axios.post(`${Constants.SERVER_URL}/servers/create`, fd, {\r\n                headers: {\r\n                    'x-access-token': localStorage.getItem(\"authToken\"),\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setErrorText(\"Server created\")\r\n                    finishServerCreation(res.data.serverId);\r\n                } \r\n            })\r\n            .catch((err) => {\r\n                setErrorText(\"Something went wrong.\")\r\n            });\r\n        } else {\r\n            setErrorText(\"Only image files can be set as the server thumbnail.\")\r\n        };\r\n    }\r\n\r\n    //Sends the user back a page.\r\n    const cancelServerCreation = () => {\r\n        navigate(-1);\r\n    }\r\n\r\n    //Sends the user to the Main.js component for server with id serverId\r\n    const finishServerCreation = (serverId) => {\r\n        props.refreshLeftSidebar();\r\n        navigate(`/picpark/s/${serverId}`);\r\n    }\r\n        return (\r\n            <div className=\"text-center position-relative w-100 h-100\">\r\n                <i className=\"bi bi-x-circle position-absolute top-0 end-0 fa-lg\" onClick={cancelServerCreation}></i>\r\n                <div className=\"mx-auto w-75 mt-5\">\r\n                    <div>{errorText}</div>\r\n                    Server Name\r\n                    <div className=\"input-group mb-3 \">\r\n                        <input type=\"text\" maxLength={20} value={nameInput} onInput={e => setNameInput(e.target.value)} className=\"form-control\" placeholder=\"Server Name\" aria-label=\"servername\" aria-describedby=\"basic-addon1\"/>\r\n                    </div>\r\n                    Server Thumbnail\r\n                    <Form action=\"/file\" method=\"post\" encType=\"multipart/form-data\">\r\n                        <Form.Group controlId=\"formFile\" className=\"mb-3\" a>\r\n                            <Form.Control type=\"file\" name=\"file-upload\" ref={formRef}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                    <button type=\"button\" onClick={handleCreation} className=\"btn btn-outline-primary\">Create</button>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default ServerCreation;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//PostCreation.js is where users will write a post, and upload an image along side it.\r\n\r\nimport React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Form} from 'react-bootstrap';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction PostCreation(props) {\r\n    const [errorText, setErrorText] = useState('');\r\n    const [textInput, setTextInput] = useState('');\r\n    const [formRef] = useState(React.createRef());\r\n    \r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n\r\n    //Sends the forms to the server to generate a post.\r\n    const handleCreation = () => {\r\n        const fd = new FormData();\r\n\r\n        fd.append(\"postText\", textInput);\r\n        \r\n        if ((!formRef.current.files[0]) || (formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n            fd.append('file-upload', formRef.current.files[0], formRef.current.files[0].name);\r\n            \r\n            axios.post(`${Constants.SERVER_URL}/posts/upload/${params.serverId}`, fd, {\r\n                headers: {\r\n                    'x-access-token': localStorage.getItem(\"authToken\"),\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n                })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    exitPostCreation();\r\n                } \r\n            })\r\n            .catch((err) => {\r\n                setErrorText(\"Something went wrong.\")\r\n            });\r\n        } else {\r\n            setErrorText(\"Only image files can be uploaded.\")\r\n        };\r\n\r\n    \r\n    }\r\n\r\n    //Returns the user to the server they were posting to.\r\n    const exitPostCreation = () => {\r\n        navigate(`/picpark/s/${params.serverId}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-center container position-relative w-100 h-100\">\r\n            <i className=\"bi bi-x-circle position-absolute top-0 end-0 fa-lg\" onClick={exitPostCreation}></i>\r\n            <div className=\"start-50 top-50 translate-middle position-absolute w-75 mt-5\">\r\n                \r\n                <div>{errorText}</div> \r\n                Post Text\r\n                <div className=\"input-group w-100\">\r\n                    <textarea type=\"text\" value={textInput} onInput={e => setTextInput(e.target.value)} className=\"form-control\" aria-label=\"Add text\"></textarea>\r\n                </div>\r\n                Image File\r\n                <Form className=\"w-100\" action=\"/file\" method=\"post\" encType=\"multipart/form-data\">\r\n                    <Form.Group controlId=\"formFile\" className=\"mb-3\" a>\r\n                        <Form.Control type=\"file\" name=\"file-upload\" ref={formRef}/>\r\n                    </Form.Group>\r\n                </Form>\r\n                <button type=\"button\" onClick={handleCreation} className=\"btn btn-outline-primary\">Submit</button>\r\n            </div>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default PostCreation;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//CommentThumbnail.js displays the comments posted in the comment section including information about the user who posted it.\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport {Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nimport '../css/Thumbnail.css';\r\nimport * as Constants from '../../utils/constants';\r\n\r\nimport Loading from '../secondary/Loading';\r\nimport Avatar from '../thumbnails/Avatar';\r\n\r\n\r\nfunction CommentThumbnail(props) {\r\n\r\n    const [author, setAuthor] = useState(null);\r\n    const [userId, setUserId] = useState();\r\n\r\n    //Component hook to retrieve the profile of the comments author.\r\n    useEffect(() => {\r\n        if (props.commentObject != null) {\r\n            axios.get(`${Constants.SERVER_URL}/accounts/getUser/${props.commentObject.authorId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200){\r\n                    setAuthor(res.data.profileObject); \r\n                    setUserId(res.data.userId);\r\n                }\r\n            }).catch((err) => {\r\n                //do nothing\r\n            });;\r\n        }\r\n    }, [props.commentObject]);\r\n\r\n    //Handles selection from the dropdown menu.\r\n    const handleSelect = (e) => {\r\n        if (e === \"delete\"){\r\n            props.deleteCommentCallback(props.commentObject._id);\r\n        }\r\n    }\r\n\r\n    return(\r\n        author ?\r\n            <div className=\"container thumbnail-wrapper w-90 m-2 border border-secondary\">\r\n                    <div className=\"position-absolute end-0 me-2\">\r\n                        {(author._id === userId) ?\r\n                            <DropdownButton title=\"\" id=\"dropdown-basic-button\" variant=\"secondary\" size=\"sm\" onSelect={handleSelect}>\r\n                                <Dropdown.Item eventKey=\"delete\">Delete</Dropdown.Item>\r\n                            </DropdownButton>\r\n                        : \"\"}\r\n                    </div>\r\n                    <div className=\"row h-100\">\r\n                        <div className=\"col-md-2 my-3\">\r\n                            <Avatar avatarPostId={author.avatarPostId}/>\r\n                        </div>\r\n                        <div className=\"col-md-10 my-auto\">\r\n                            <div className=\"border-bottom border-secondary text-center\">\r\n                                <h5>{author.username}</h5>\r\n                            </div>\r\n                            <div className=\"w-100 p-2\">\r\n                                {props.commentObject.commentText}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        : <Loading/>\r\n\r\n    );\r\n}\r\n\r\nexport default CommentThumbnail;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//CommentSecton.js is a secondary component that is a child of ViewPost. Here, users can read comments and comment on a post.\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport * as Constants from '../../utils/constants';\r\nimport CommentThumbnail from '../thumbnails/CommentThumbnail'\r\nimport '../css/Thumbnail.css';\r\n\r\nfunction CommentSection(props) {\r\n\r\n    const [comments, setComments] = useState([]);\r\n    const [updateComments, setUpdateComments] = useState(true);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    //Component hook to get the comments on a post.\r\n    useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/posts/getComments/${props.serverId}/${props.postId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200){\r\n                    setComments(res.data);  \r\n                }\r\n            });\r\n    }, [updateComments, props.serverId, props.postId]);\r\n\r\n    //Delete a comment by ID.\r\n    const deleteComment = (commentId) => {\r\n        axios.delete(`${Constants.SERVER_URL}/posts/deleteComment/${props.serverId}/${commentId}`, {headers: \r\n        {\r\n            \"x-access-token\": localStorage.getItem(\"authToken\")\r\n        }})\r\n        .then((res) => {\r\n            if (res.status === 200){\r\n                setUpdateComments(!updateComments);\r\n            }\r\n        });\r\n    }\r\n\r\n    //Sends post to server to add comment to comments.\r\n    const makeComment = (e) => {\r\n        const fd = new FormData();\r\n        fd.append(\"commentText\", newComment);\r\n\r\n        axios.post(`${Constants.SERVER_URL}/posts/makeComment/${props.serverId}/${props.postId}`, fd,\r\n            {\r\n                headers: \r\n                    {\r\n                        \"x-access-token\": localStorage.getItem(\"authToken\"),\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n            })\r\n        .then((res) => {\r\n            if (res.status === 200){\r\n                setNewComment('');\r\n                setUpdateComments(!updateComments);\r\n            }\r\n        }).catch((err) => {\r\n            setErrorMessage(\"You do not have permission to comment in this server.\");\r\n        });\r\n    }\r\n\r\n     //Enter pressed in the comment text field.\r\n     const submitComment = (e) => {\r\n        if(e.keyCode === 13 && e.shiftKey === false) {\r\n          e.preventDefault();\r\n          makeComment(e);\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"col border border-secondary content-comment mb-4 \">\r\n            <ul className=\"list-group w-100\">\r\n                    {errorMessage}\r\n                    <div className=\"border-bottom border-secondary pb-2\">\r\n                    <textarea type=\"text\" value={newComment} onInput={e => setNewComment(e.target.value)} className=\"form-control mt-3\" rows=\"2\" placeholder=\"Comment\" aria-label=\"Comment\" onKeyDown={submitComment}/>\r\n                    <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={makeComment}>Post Comment</button>\r\n                    </div>\r\n                    {comments.map((el, i) => (\r\n                        <CommentThumbnail   key={el._id}\r\n                                            deleteCommentCallback={deleteComment}\r\n                                            commentObject={el}/>\r\n                    ))}\r\n            </ul>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CommentSection;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//ViewPost.js allows a user to view the post, who made it and when, as well as comment and read comments written on the post.\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams} from 'react-router-dom';\r\nimport {Dropdown, DropdownButton} from 'react-bootstrap';\r\n\r\nimport '../css/ViewPost.css'\r\nimport * as Constants from '../../utils/constants';\r\n\r\nimport UserThumbnail from '../thumbnails/UserThumbnail';\r\nimport CommentSection from '../secondary/CommentSection';\r\nimport Loading from '../secondary/Loading';\r\n\r\nfunction ViewPost(props) {\r\n    \r\n    const [userId, setUserId] = useState('');\r\n    const [post, setPost] = useState({});\r\n    const [displayPostText, setDisplayPostText] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [date, setDate] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n  \r\n    //Component hook to retrieve the post information from the server.\r\n    useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/servers/getPost/${params.serverId}/${params.postId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n        }).then((res) => {\r\n            if (res.status === 200) {\r\n                setDate(new Date(res.data.post.date));\r\n                setPost(res.data.post);\r\n                setUserId(res.data.userId);\r\n                setDisplayPostText(res.data.post.postText);\r\n            } else  if (res.status === 404) {\r\n                navigate('/picpark');\r\n            }\r\n\r\n        })\r\n    }, [navigate, params.postId, params.serverId]);\r\n\r\n    //Sends inputted data to the server to edit the post.\r\n    const editPost = () => {\r\n        const fd = new FormData();\r\n        fd.append(\"displayPostText\", displayPostText);\r\n\r\n        axios.post(`${Constants.SERVER_URL}/posts/editPost/${params.serverId}/${params.postId}`, fd,\r\n            {\r\n                headers: \r\n                    {\r\n                        \"x-access-token\": localStorage.getItem(\"authToken\"),\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200){\r\n                    \r\n                } else {\r\n                    setDisplayPostText(post.postText);\r\n                }\r\n            });\r\n    }\r\n\r\n    //Sends a request to the server to delete the post.\r\n    const deletePost = () => {\r\n        axios.delete(`${Constants.SERVER_URL}/posts/deletePost/${params.serverId}/${params.postId}`, {headers: \r\n        {\r\n            \"x-access-token\": localStorage.getItem(\"authToken\")\r\n        }})\r\n        .then((res) => {\r\n            if (res.status === 200){\r\n                exitViewPost();\r\n            }\r\n        });\r\n    }\r\n\r\n    //Handles the drop down menu for the post.\r\n    const handleSelect = (e) => {\r\n        if (e === \"edit\"){\r\n            setEditMode(true);\r\n        } else if (e === \"delete\"){\r\n            deletePost();\r\n        }\r\n    }\r\n\r\n    //Return to the Main view for the posts server.\r\n    const exitViewPost = () => {\r\n        navigate(`/picpark/s/${params.serverId}`);\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <div className=\"container text-center position-relative w-100 h-100\">\r\n            <i className=\"bi bi-x-circle position-absolute top-0 end-0 fa-lg\" onClick={exitViewPost}></i>\r\n            {post ?\r\n\r\n                <div className=\"row start-50 translate-middle-x top-0 position-absolute w-100 mt-4 m-1\">\r\n                    <div className=\"col\">\r\n                        {post.dataType !== \"text\" ?\r\n                            <div className=\"row border border-secondary content-viewer\">\r\n                                <div className=\"position-absolute end-0 me-4 mt-2\">\r\n                                    {(post.authorId === userId) ?\r\n                                        <DropdownButton title=\"\" id=\"dropdown-basic-button\" variant=\"secondary\" size=\"sm\" onSelect={handleSelect}>\r\n                                            <Dropdown.Item eventKey=\"edit\">Edit</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey=\"delete\">Delete</Dropdown.Item>\r\n                                        </DropdownButton>\r\n                                    : \"\"}\r\n                                </div>\r\n                                <div>\r\n                                    {post.dataType === \"image\" ? <img alt={`Posted by user with ID ${post.authorId}`}  className=\"img-fluid my-3 mx-auto d-block\" src={`${Constants.SERVER_URL}/files/image/${post.dataId}`}/> : null}\r\n                                </div>\r\n                            </div>\r\n                        : null} \r\n\r\n                        <div className=\"row border border-secondary\">\r\n                            <div className=\"col-4 my-auto border-end border-secondary\">\r\n                                {date ?\r\n                                    date.toDateString()\r\n                                : \"\"}\r\n                            </div>\r\n                            <div className=\"col-8\">\r\n                                <UserThumbnail userId={post.authorId}/>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row border border-secondary content-text mb-4 h-auto\">\r\n                            <div className=\"p-2\">\r\n                                {\r\n                                    editMode \r\n                                    ?\r\n                                    <textarea type=\"text\" value={displayPostText} onInput={e => setDisplayPostText(e.target.value)} className=\"form-control mt-3\" rows=\"2\" placeholder=\"Edit Post\" aria-label=\"Edit Post\"/>\r\n                                    :\r\n                                    displayPostText\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {userId ?\r\n                        <CommentSection userId={userId} serverId={params.serverId} postId={params.postId}/>\r\n                    : <Loading/>} \r\n                </div>\r\n\r\n            : <Loading/>}\r\n            \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default ViewPost;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//Displays a users profile which can include servers they're a part of as well as security options.\r\n\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport {Tabs, Tab, Form} from 'react-bootstrap';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport Avatar from '../thumbnails/Avatar';\r\nimport Loading from '../secondary/Loading'\r\nimport ServerThumbnail from '../thumbnails/ServerThumbnail';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction ViewProfile(props) {\r\n    \r\n    const [updateProfile, setUpdateProfile] = useState(false);\r\n\r\n    const [profile, setProfile] = useState(null);\r\n    const [userId, setUserId] = useState();\r\n\r\n    const [madeChanges, setMadeChanges] = useState(true);\r\n\r\n    const [editUsername, setEditUsername] = useState('');\r\n\r\n    const [hoverOverAvatar, setHoverOverAvatar] = useState(false);\r\n    const [previewAvatar, setPreviewAvatar] = useState();\r\n\r\n    const [userServers, setUserServers] = useState([]);\r\n    const [loadedServers, setLoadedServers] = useState(false);\r\n\r\n    const [userSecurities, setUserSecurities] = useState();\r\n    const [loadedSecurities, setLoadedSecurities] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n    const formRef = useRef(null);\r\n\r\n    //Component hook for retrieving the user profile.\r\n    useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/accounts/getUser/${params.userId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n        }).then((res) => {\r\n            if (res.status === 200) {\r\n                setProfile(res.data.profileObject);\r\n                setUserId(res.data.userId);\r\n                setEditUsername(res.data.profileObject.username);\r\n            } else if (res.status === 404) {\r\n                navigate('/picpark');\r\n            }\r\n        });\r\n    }, [navigate, params.userId, updateProfile]);\r\n\r\n    //Component hook for getting the servers the profile's user is a member of.\r\n    useEffect(() => {\r\n       axios.get(`${Constants.SERVER_URL}/accounts/userServers/${params.userId}`, {headers: \r\n            {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n            }\r\n        }).then((res) => {\r\n            if (res.status === 200) {\r\n                setUserServers(res.data.permissions);\r\n                setLoadedServers(true);\r\n            }\r\n        }).catch((err) => {\r\n            setLoadedServers(true);\r\n        })\r\n    }, [params.userId]);\r\n\r\n    //Component hook for getting the security settings of the current user. only displayed if viewing on profile.\r\n    useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/accounts/userSecurities`, {headers: \r\n            {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n            }\r\n        }).then((res) => {\r\n            setUserSecurities(res.data);\r\n            setLoadedSecurities(true);\r\n        })\r\n    }, [])\r\n\r\n    //Submit input forms to server to save changes made to profile.\r\n    const saveChanges = () => {\r\n        const fd = new FormData();\r\n\r\n        fd.append(\"editUsername\", editUsername);\r\n        fd.append(\"userSecurities\", userSecurities);\r\n        \r\n\r\n        if (formRef.current.files[0] && formRef.current.files[0].name) {\r\n            fd.append('file-upload', formRef.current.files[0], formRef.current.files[0].name);\r\n        }\r\n\r\n        if ((!formRef.current.files[0]) || (formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n            axios.post(`${Constants.SERVER_URL}/accounts/updateProfile/${profile._id}`, fd, {\r\n                headers: {\r\n                    'x-access-token': localStorage.getItem(\"authToken\"),\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setUpdateProfile(!updateProfile);\r\n                    setMadeChanges(false);\r\n                    props.refreshRightSidebar();\r\n                } \r\n            })\r\n            .catch((err) => {\r\n            });\r\n        } else {\r\n            //err\r\n        };\r\n\r\n       \r\n    }\r\n\r\n     //Returns the user to the previous page\r\n     const exitViewProfile = () => {\r\n        navigate(-1);\r\n    }\r\n\r\n    //Event for when the user mouses over their avatar.\r\n    const mouseOverEvent = (e) => {\r\n        if (profile._id === userId) {\r\n            setHoverOverAvatar(true);\r\n        }\r\n    }\r\n\r\n    //Event for when the user is no longer mousing over their avatar.\r\n    const mouseLeaveEvent = (e) => {\r\n        if (profile._id === userId) {\r\n            setHoverOverAvatar(false);\r\n        }\r\n    }\r\n\r\n    //Event for when the user clicks the avatar\r\n    const onClickAvatar = (e) => {\r\n        if (profile._id === userId) {\r\n            formRef.current.click();\r\n        }\r\n    }\r\n\r\n\r\n    //Sets the thumbnail avatar to be a new one, and readies the data for uploading.\r\n    const changeAvatar = (e) => {\r\n        if ((formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n            var reader = new FileReader();\r\n            reader.onload = function () {\r\n                setPreviewAvatar(reader.result);\r\n            }\r\n            reader.readAsDataURL(formRef.current.files[0]);\r\n            setMadeChanges(true);\r\n            \r\n        }\r\n    }\r\n\r\n    //Triggers onchange in username field.\r\n    const usernameEvent = (e) => {\r\n        setEditUsername(e.target.value)\r\n        setMadeChanges(true);\r\n    }\r\n\r\n    //Event for handling changing the radio options in the server settings.\r\n    const securitySettingEvent = (e) => {\r\n        setMadeChanges(true);\r\n        const updatedSecurities = userSecurities;\r\n        switch (e.target.id) {\r\n            case ('security-radio-0'):\r\n                updatedSecurities.serversVisibility = 0;\r\n                break;\r\n            case ('security-radio-1'):\r\n                updatedSecurities.serversVisibility = 1;\r\n                break;\r\n            case ('security-radio-2'):\r\n                updatedSecurities.serversVisibility = 2;\r\n                break;\r\n            default:\r\n                //Do nothing\r\n                break;\r\n        }\r\n        setUserSecurities(updatedSecurities);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"text-center position-relative w-100 h-100\">\r\n            <i className=\"bi bi-x-circle position-absolute top-0 end-0 fa-lg\" onClick={exitViewProfile}></i>\r\n\r\n            {profile ?\r\n\r\n            <div className=\"container start-50 translate-middle-x top-0 position-absolute w-100 mt-4 m-1 border border-secondary p-3\">\r\n                <div className=\"row \">\r\n                    <div className=\"col-md-4 position-relative\"  >\r\n                        <div className=\"position-relative\" onMouseOver={mouseOverEvent} onMouseLeave={mouseLeaveEvent} onClick={onClickAvatar}>\r\n                            {hoverOverAvatar ? <img alt=\"Click to change the avatar.\" style={{borderRadius:'50%', objectFit:'cover', height:'100px', width:'100px'}} className=\"thumbnail-image start-50 top-50 translate-middle position-absolute\" src={`${process.env.PUBLIC_URL}/images/server_default.png`}/> : \"\"}\r\n                            <Avatar large={true} localPreview={previewAvatar} avatarPostId={profile.avatarPostId}/>\r\n                            <input type=\"file\" onChange={changeAvatar} name=\"file-upload\" id=\"file\" ref={formRef} style={{ display: \"none\" }}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-8 mt-5\">\r\n                        <div className=\"row\">\r\n                            {profile._id  === userId ? \r\n                                <input maxLength={20} type=\"text\" value={editUsername} onInput={usernameEvent} className=\"form-control w-75\" rows=\"1\" placeholder=\"Username\" aria-label=\"Username\"/>\r\n                            : profile.username}\r\n                            \r\n                        </div>\r\n                        <div className=\"row\">\r\n                            Account ID: {profile._id}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row m-4\">\r\n                    <Tabs defaultActiveKey=\"servers\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n                        <Tab eventKey=\"servers\" title=\"Servers\">\r\n                            <div className=\"container\">\r\n                                {userServers ?\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            userServers.map((el, i) => (\r\n                                                <div className=\"col-md-4\" key={el._id}>\r\n                                                    <ServerThumbnail serverId={el.serverId}/>\r\n                                                </div>\r\n                                            ))\r\n                                        }\r\n                                    </div>\r\n                                : (loadedServers ? \"You do not have permission to view these servers.\" : <Loading/>)}\r\n                            </div>\r\n                        </Tab>\r\n                        {userId === profile._id ?\r\n                            <Tab eventKey=\"settings\" title=\"Account Settings\">\r\n                                {loadedSecurities ?\r\n                                    <Form>\r\n                                        <div className=\"row\">\r\n                                            <Form.Label className=\"my-auto col-md-6\">Who can view the servers you're a member of?</Form.Label>\r\n                                            <div className=\"ps-5 my-auto col-md-6 border-start border-secondary\">\r\n                                                <Form.Check type='radio' id={`security-radio-0`} label={`Anyone`} checked={userSecurities.serversVisibility === 0} onChange={securitySettingEvent}/>\r\n                                                <Form.Check type='radio' id={`security-radio-1`} label={`Users I share a server with`} checked={userSecurities.serversVisibility === 1} onChange={securitySettingEvent}/>\r\n                                                <Form.Check type='radio' id={`security-radio-2`} label={`No one`} checked={userSecurities.serversVisibility === 2} onChange={securitySettingEvent}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Form>\r\n                                : <Loading/>}\r\n                            </Tab>\r\n                        : \"\"}\r\n                    </Tabs>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-end\">\r\n                    {profile._id === userId ? <div  className=\"justify-content-center mt-5 mx-auto text-center w-25 row\">\r\n                            {madeChanges ? <button type=\"button\" onClick={saveChanges} className=\"btn-md btn-outline-primary\">Save Changes</button> : \"Profile Saved\"}\r\n                        </div>\r\n                    : \"\"}\r\n                </div>\r\n                \r\n                \r\n                \r\n            </div>\r\n\r\n            : <Loading/> }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewProfile;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//ViewServer.js is a component for viewing more information about a server. A user can change the server settings here,\r\n//view other members profiles, or leave/delete the server.\r\n\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport {Tabs, Tab, Form, Modal, Button} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport Avatar from '../thumbnails/Avatar';\r\nimport Loading from '../secondary/Loading'\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport UserThumbnail from '../thumbnails/UserThumbnail';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nfunction ViewServer(props) {\r\n    \r\n    const [updateServer, setUpdateServer] = useState(false);\r\n\r\n    const [server, setServer] = useState(null);\r\n    \r\n    //Permission of the current user in relation to the server.\r\n    const [userPermission, setUserPermission] = useState();\r\n\r\n    const [madeChanges, setMadeChanges] = useState(true);\r\n\r\n    const [editServerName, setEditServerName] = useState('');\r\n\r\n    const [hoverOverAvatar, setHoverOverAvatar] = useState(false);\r\n    const [previewAvatar, setPreviewAvatar] = useState();\r\n\r\n    const [serverUsers, setServerUsers] = useState(null);\r\n    const [loadedUsers, setLoadedUsers] = useState(false);\r\n\r\n    const [loadedSecurities, setLoadedSecurities] = useState(false);\r\n\r\n    //Radio menu variables\r\n    const [postsVisibility, setPostsVisibility] = useState();\r\n    const [allowJoin, setAllowJoin] = useState();\r\n    const [allowComment, setAllowComment] = useState();\r\n    const [usersVisibility, setUsersVisibility] = useState();\r\n\r\n    const modalTextDict = {\r\n        0: \"Are you sure you want to leave this server?\",\r\n        1: \"You are the only admin on this server, leaving will delete the server and all its posts. Is this okay?\"\r\n    }\r\n\r\n\r\n    const [showLeaveModal, setShowLeaveModal] = useState(false);\r\n    const [leaveModalStage, setLeaveModalStage] = useState(0);\r\n\r\n    const [showRankModal, setShowRankModal] = useState(false);\r\n    const [rankModalProfile, setRankModalProfile] = useState({});\r\n    const [rankRadio, setRankRadio] = useState(0);\r\n\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n    const formRef = useRef(null);\r\n\r\n    //Component hook for retrieving the server information.\r\n    useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/servers/getServer/${params.serverId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n        }).then((res) => {\r\n            if (res.status === 200) {\r\n                setServer(res.data.serverObject);\r\n                setUserPermission(res.data.permission);\r\n                setEditServerName(res.data.serverObject.serverName);\r\n            } else if (res.status === 404) {\r\n                navigate('/picpark');\r\n            } \r\n        });\r\n    }, [navigate, params.serverId, updateServer]);\r\n\r\n    //Component hook for getting the list of members of the server.\r\n    useEffect(() => {\r\n       axios.get(`${Constants.SERVER_URL}/servers/serverUsers/${params.serverId}`, {headers: \r\n            {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n            }\r\n        }).then((res) => {\r\n            if (res.status === 200) {\r\n                setServerUsers(res.data);\r\n            }\r\n            setLoadedUsers(true);\r\n        }).catch((err) => {\r\n            setLoadedUsers(true);\r\n        })\r\n    }, [params.serverId]);\r\n\r\n     //Component hook for getting the server securities\r\n     useEffect(() => {\r\n        axios.get(`${Constants.SERVER_URL}/servers/serverSecurities/${params.serverId}`, {headers: \r\n             {\r\n                 \"x-access-token\": localStorage.getItem(\"authToken\")\r\n             }\r\n         }).then((res) => {\r\n            if (res.status === 200) {\r\n                setPostsVisibility(res.data.serverSecurities.postsVisibility);\r\n                setAllowJoin(res.data.serverSecurities.allowJoin);\r\n                setAllowComment(res.data.serverSecurities.allowComment);\r\n                setUsersVisibility(res.data.serverSecurities.usersVisibility);\r\n            }\r\n\r\n             setLoadedSecurities(true);\r\n\r\n         })\r\n     }, [params.serverId]);\r\n\r\n    //Save changes made to the server.\r\n    const saveChanges = () => {\r\n        const fd = new FormData();\r\n\r\n        fd.append(\"editServerName\", editServerName);\r\n\r\n        fd.append(\"postsVisibility\", postsVisibility);\r\n\r\n        fd.append(\"allowJoin\", allowJoin);\r\n\r\n        fd.append(\"allowComment\", allowComment);\r\n\r\n        fd.append(\"usersVisibility\", usersVisibility);\r\n\r\n        if (formRef.current.files[0] && formRef.current.files[0].name) {\r\n            fd.append('file-upload', formRef.current.files[0], formRef.current.files[0].name);\r\n        }\r\n\r\n        if ((!formRef.current.files[0]) || (formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n\r\n            axios.post(`${Constants.SERVER_URL}/servers/updateServer/${server._id}`, fd, {\r\n                headers: {\r\n                    'x-access-token': localStorage.getItem(\"authToken\"),\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setUpdateServer(!updateServer);\r\n                    setMadeChanges(false);\r\n                    props.refreshLeftSidebar();\r\n                } \r\n            })\r\n            .catch((err) => {\r\n            });\r\n        } else {\r\n            //err\r\n        };\r\n\r\n       \r\n    }\r\n\r\n    /////////////////////Leave Server Modal//////////////////////////////\r\n\r\n    //Opens up the leave server confirmation modal when the user clicks the Leave Server button\r\n    const leaveServer = () => {\r\n        setLeaveModalStage(0);\r\n        setShowLeaveModal(true);\r\n    }\r\n    \r\n    //Confirms that a user wishes to leave the server. If there are no other admins in the server, the user will get a\r\n    //confirmation that they wish to delete the server instead.\r\n    const leaveServerConfirm = () => {\r\n        if (leaveModalStage === 0) {\r\n            axios.delete(`${Constants.SERVER_URL}/servers/leaveServer/${params.serverId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            }).then((res) => {\r\n                if (res.status === 200) {\r\n                    props.refreshLeftSidebar();\r\n                    setUserPermission(0);\r\n                    setShowLeaveModal(false);\r\n                } else if (res.status === 202) {\r\n                    setLeaveModalStage(1)\r\n                    setShowLeaveModal(true);\r\n                }\r\n            });\r\n        } else if (leaveModalStage === 1) {\r\n            axios.delete(`${Constants.SERVER_URL}/servers/deleteServer/${params.serverId}`, {headers: \r\n                {\r\n                    \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                }\r\n            }).then((res) => {\r\n                props.refreshLeftSidebar();\r\n                navigate(\"/picpark\");\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    //Close the leave server modal.\r\n    const leaveServerCancel = () => {\r\n        setLeaveModalStage(0);\r\n        setShowLeaveModal(false);\r\n    }\r\n\r\n    ////////////////////////Change rank modal///////////////////////////////////\r\n\r\n    //Open the change user rank modal.\r\n    const openChangeRankModal = (userId, username, serverPermission) => {\r\n        setRankRadio(serverPermission);\r\n        setRankModalProfile({userId: userId, username: username});\r\n        setShowRankModal(true);\r\n    }\r\n\r\n    //Handles modifying the user rank radio options.\r\n    const changeRankModalRadio = (e) => {\r\n        switch (e.target.id) {\r\n            case ('status-radio-0'):\r\n                setRankRadio(0);\r\n                break;\r\n            case ('status-radio-1'):\r\n                setRankRadio(1);\r\n                break;\r\n            case ('status-radio-2'):\r\n                setRankRadio(2);\r\n                break;\r\n            case ('status-radio-3'):\r\n                setRankRadio(3);\r\n                break;\r\n            case ('status-radio-4'):\r\n                setRankRadio(4);\r\n                break;\r\n            case ('status-radio-5'):\r\n                setRankRadio(5);\r\n                break;\r\n            default:\r\n                //do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Sends a request to the server to change the rank of a user.\r\n    const changeRank = () => {\r\n        const fd = new FormData();\r\n        axios.post(`${Constants.SERVER_URL}/servers/changeRank/${server._id}/${rankModalProfile.userId}/${rankRadio}`, fd, {\r\n                headers: {\r\n                    'x-access-token': localStorage.getItem(\"authToken\")\r\n                }\r\n            })\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setShowRankModal(false);\r\n                } \r\n            })\r\n            .catch((err) => {\r\n            });\r\n    }\r\n\r\n     //Returns the user to the previous page.\r\n     const exitViewServer = () => {\r\n        navigate(-1);\r\n    }\r\n\r\n    //////////////////////Avatar change stuff////////////////\r\n\r\n    //Event for when the user mouses over the avatar\r\n    const mouseOverEvent = (e) => {\r\n        if (userPermission >= 5) {\r\n            setHoverOverAvatar(true);\r\n        }\r\n    }\r\n\r\n    //Event for when the user is no longer mousing over the avatar\r\n    const mouseLeaveEvent = (e) => {\r\n        if (userPermission >= 5) {\r\n            setHoverOverAvatar(false);\r\n        }\r\n    }\r\n\r\n    //Event for when the user clicks the avatar\r\n    const onClickAvatar = (e) => {\r\n        if (userPermission >= 5) {\r\n            formRef.current.click();\r\n        }\r\n    }\r\n\r\n    //Sets the thumbnail avatar to be a new one, and readies the data for uploading.\r\n    const changeAvatar = (e) => {\r\n        if ((formRef.current.files[0].type.split('/')[0] === \"image\")) {\r\n            var reader = new FileReader();\r\n            reader.onload = function () {\r\n                setPreviewAvatar(reader.result);\r\n            }\r\n            reader.readAsDataURL(formRef.current.files[0]);\r\n            setMadeChanges(true);\r\n            \r\n        } else {\r\n            //display error\r\n        }\r\n    }\r\n\r\n    //Triggers onchange in serverName field.\r\n    const serverNameEvent = (e) => {\r\n        setEditServerName(e.target.value)\r\n        setMadeChanges(true);\r\n    }\r\n\r\n    //Handles radio options for server security.\r\n    const securitySettingEvent = (e) => {\r\n        setMadeChanges(true);\r\n        switch (e.target.id) {\r\n            case ('security-radio-0-0'):\r\n                setPostsVisibility(0);\r\n                break;\r\n            case ('security-radio-0-1'):\r\n                setPostsVisibility(1);\r\n                break;\r\n            case ('security-radio-1-0'):\r\n                setAllowJoin(0);\r\n                break;\r\n            case ('security-radio-1-1'):\r\n                setAllowJoin(1);\r\n                break;\r\n            case ('security-radio-2-0'):\r\n                setAllowComment(0);\r\n                break;\r\n            case ('security-radio-2-1'):\r\n                setAllowComment(1);\r\n                break;\r\n            case ('security-radio-3-0'):\r\n                setUsersVisibility(0);\r\n                break;\r\n            case ('security-radio-3-1'):\r\n                setUsersVisibility(1);\r\n                break;\r\n            default:\r\n                //do nothing\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Sends the user to the Main component of the server they're viewing the information of.\r\n    const visitServer = () => {\r\n        navigate(`/picpark/s/${server._id}`);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"text-center position-relative w-100 h-100\">\r\n            <i className=\"bi bi-x-circle position-absolute top-0 end-0 fa-lg\" onClick={exitViewServer}></i>\r\n\r\n        <Modal show={showLeaveModal} onHide={() => setShowLeaveModal(false)}>\r\n            <Modal.Body>{modalTextDict[leaveModalStage]}</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={leaveServerCancel}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={leaveServerConfirm}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal show={showRankModal} onHide={() => setShowRankModal(false)}>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Label className=\"my-auto col-md-6\">Set User Status for {rankModalProfile.username}</Form.Label>\r\n                        <div className=\"ps-5 my-auto col-md-6 border-start border-secondary\">\r\n                            <Form.Check type='radio' id={`status-radio-0`} label={`Banned`} checked={rankRadio === 0} onChange={changeRankModalRadio}/>\r\n                            <Form.Check type='radio' id={`status-radio-1`} label={`Non-Member`} checked={rankRadio === 1} onChange={changeRankModalRadio}/>\r\n                            <Form.Check type='radio' id={`status-radio-2`} label={`Member`} checked={rankRadio === 2} onChange={changeRankModalRadio}/>\r\n                            <Form.Check type='radio' id={`status-radio-3`} label={`Super Member`} checked={rankRadio === 3} onChange={changeRankModalRadio}/>\r\n                            <Form.Check type='radio' id={`status-radio-4`} label={`Moderator`} checked={rankRadio === 4} onChange={changeRankModalRadio}/>\r\n                            <Form.Check type='radio' id={`status-radio-5`} label={`Admin`} checked={rankRadio === 5} onChange={changeRankModalRadio}/>\r\n                        </div>\r\n                </Form>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => setShowRankModal(false)}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={changeRank}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n            {server ?\r\n\r\n            <div className=\"container start-50 translate-middle-x top-0 position-absolute w-100 mt-4 m-1 border border-secondary p-3\">\r\n                <div className=\"row \">\r\n                    <div className=\"col-md-4 position-relative\"  >\r\n                        <div className=\"position-relative\" onMouseOver={mouseOverEvent} onMouseLeave={mouseLeaveEvent} onClick={onClickAvatar}>\r\n                            {hoverOverAvatar ? <img alt=\"Click to change the avatar.\" style={{borderRadius:'50%', objectFit:'cover', height:'100px', width:'100px'}} className=\"thumbnail-image start-50 top-50 translate-middle position-absolute\" src={`${process.env.PUBLIC_URL}/images/server_default.png`}/> : \"\"}\r\n                            <Avatar large={true} localPreview={previewAvatar} avatarPostId={server.avatarPostId}/>\r\n                            <input type=\"file\" onChange={changeAvatar} name=\"file-upload\" id=\"file\" ref={formRef} style={{ display: \"none\" }}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-8 mt-5\">\r\n                        <div className=\"row\">\r\n                            {(userPermission >= 5) ? \r\n                                <input maxLength={20} type=\"text\" value={editServerName} onInput={serverNameEvent} className=\"form-control w-75\" rows=\"1\" placeholder=\"Server Name\" aria-label=\"Server Name\"/>\r\n                            : server.serverName}     \r\n                        </div>\r\n                        <div className=\"row\">\r\n                            Server ID: {server._id}\r\n                        </div>\r\n                        {(userPermission >= 5) ? <div  className=\"justify-content-center mt-5 mx-auto text-center w-25 row\">\r\n                            {madeChanges ? <button type=\"button\" onClick={saveChanges} className=\"btn-md btn-outline-primary\">Save Changes</button> : \"Changes Saved\"}\r\n                        </div>\r\n                        : \"\"}\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"row m-4\">\r\n                    <Tabs defaultActiveKey=\"users\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n                        <Tab eventKey=\"users\" title=\"Users\">\r\n                            <div className=\"container\">\r\n                                {serverUsers && userPermission ?\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            serverUsers.map((el, i) => {\r\n                                                return(\r\n                                                    (el.permissions) > 0 ?\r\n                                                        <div className=\"col-md-4\" key={el._id}>\r\n                                                            <div className=\"row\">\r\n                                                                <UserThumbnail userId={el.userId} changeRankCallback={openChangeRankModal} serverId={params.serverId} userPermission={userPermission}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    : \"\"\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                : (loadedUsers ? \"You do not have permission to view this server's users.\" : <Loading/>)}\r\n                            </div>\r\n                        </Tab>\r\n                        <Tab eventKey=\"settings\" title=\"Server Settings\">\r\n                            {loadedSecurities ?\r\n                                <Form>\r\n                                    <div className=\"row\">\r\n                                        <Form.Label className=\"my-auto col-md-6\">Who can view posts?</Form.Label>\r\n                                        <div className=\"ps-5 my-3 col-md-6 border-start border-secondary\">\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-0-0`} label={`Anyone`} checked={postsVisibility === 0} onChange={securitySettingEvent}/>\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-0-1`} label={`Members Only`} checked={postsVisibility === 1} onChange={securitySettingEvent}/>\r\n                                        </div>\r\n                                        <Form.Label className=\"my-auto col-md-6\">Who can join?</Form.Label>\r\n                                        <div className=\"ps-5 my-3 col-md-6 border-start border-secondary\">\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-1-0`} label={`Anyone with a link`} checked={allowJoin === 0} onChange={securitySettingEvent}/>\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-1-1`} label={`Nobody`} checked={allowJoin === 1} onChange={securitySettingEvent}/>\r\n                                        </div>\r\n                                        <Form.Label className=\"my-auto col-md-6\">Who can comment on posts?</Form.Label>\r\n                                        <div className=\"ps-5 my-3 col-md-6 border-start border-secondary\">\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-2-0`} label={`Anyone`} checked={allowComment === 0} onChange={securitySettingEvent}/>\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-2-1`} label={`Members`} checked={allowComment === 1} onChange={securitySettingEvent}/>\r\n                                        </div>\r\n                                        <Form.Label className=\"my-auto col-md-6\">Who can view members of the server?</Form.Label>\r\n                                        <div className=\"ps-5 my-3 col-md-6 border-start border-secondary\">\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-3-0`} label={`Anyone`} checked={usersVisibility === 0} onChange={securitySettingEvent}/>\r\n                                            <Form.Check disabled={userPermission < 5} type='radio' id={`security-radio-3-1`} label={`Members`} checked={usersVisibility === 1} onChange={securitySettingEvent}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </Form>\r\n                            : <Loading/>}\r\n                        </Tab>\r\n                        <Tab eventKey=\"banned\" title=\"Banned Users\">\r\n                        <div className=\"container\">\r\n                                {serverUsers && userPermission ?\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            serverUsers.map((el, i) => {\r\n                                                return(\r\n                                                    (el.permissions === 0) ?\r\n                                                        <div className=\"col-md-4\" key={el._id}>\r\n                                                            <div className=\"row\">\r\n                                                                <UserThumbnail userId={el.userId} changeRankCallback={openChangeRankModal} serverId={params.serverId} userPermission={userPermission}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    : \"\"\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                : (loadedUsers ? \"You do not have permission to view this server's users.\" : <Loading/>)}\r\n                            </div>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-end\">\r\n                    <div className=\"col-md-6\">\r\n                        {(userPermission >= 2) ? \r\n                            <div className=\"row\">\r\n                                <button type=\"button\" onClick={leaveServer} className=\"w-100 my-2 btn-md btn-outline-primary\">Leave Server</button>\r\n                            </div>\r\n                        : \"\"}\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <button type=\"button\" onClick={visitServer} className=\"w-100 my-2 btn-md btn-outline-primary\">Visit Server</button>\r\n                    </div>\r\n                </div>\r\n                \r\n                \r\n                \r\n            </div>\r\n\r\n            : <Loading/> }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewServer;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//A splash page to shill my garbage.\r\n\r\nimport React from 'react';\r\n\r\nfunction SplashPage(props) {\r\n        return (\r\n            <div className=\"input-form-wrapper text-center\">\r\n                <p>Hello and thank you for visiting my project, Pic Park. Feel free to create a new server in the top left and upload some images.</p>\r\n                <p>KarlPollock91@gmail.com</p>\r\n                <p>www.karlpollock.com</p>\r\n                <p>Created by Karl Pollock, 2022.</p>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default SplashPage;","//Written by Karl Pollock, 2022.\r\n//KarlPollock91@gmail.com\r\n//www.karlpollock.com\r\n\r\n//App.js is the top level component which ensures the user is logged in correctly before displaying child components.\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {Route, Routes} from 'react-router-dom';\r\n\r\nimport * as Constants from '../../utils/constants';\r\n\r\nimport LeftSidebar from './LeftSidebar';\r\nimport Main from './Main';\r\nimport RightSidebar from './RightSidebar';\r\nimport Loading from '../secondary/Loading';\r\nimport Login from './Login';\r\nimport ServerCreation from './ServerCreation';\r\nimport PostCreation from './PostCreation';\r\nimport ViewPost from './ViewPost';\r\nimport ViewProfile from './ViewProfile';\r\nimport ViewServer from './ViewServer';\r\nimport SplashPage from './SplashPage';\r\n\r\n\r\nfunction App(props) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n    const [userInfo, setUserInfo] = useState();\r\n\r\n    //Component hook that checks if user is logged.\r\n    useEffect(() => {\r\n        if (!localStorage.getItem(\"authToken\")){\r\n            setLoading(false);\r\n            setLoggedIn(false);\r\n        } else {\r\n            verifyAuth();\r\n        }\r\n    }, [])\r\n\r\n    //Send the users current auth token to the server to validate.\r\n    const verifyAuth = () => {\r\n        axios.get(`${Constants.SERVER_URL}/accounts/verifyAuth`, {\r\n            headers: {\r\n                \"x-access-token\": localStorage.getItem(\"authToken\")\r\n                // \"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n            }).then((res) => {\r\n                if (res.status === 200) {\r\n                    setUserInfo(res.data)\r\n                    setLoggedIn(true);\r\n\r\n                }\r\n            }).catch((err) => {\r\n                localStorage.clear();\r\n            });\r\n    }\r\n\r\n    //Log out and return to login screen.\r\n    const logout = () => {\r\n        localStorage.clear();\r\n        setLoggedIn(false);\r\n    }\r\n\r\n\r\n    const [newServer, setNewServer] = useState(false);\r\n    const [newUser, setNewUser] = useState(false);\r\n\r\n    //Refresh the items in the left sidebar.\r\n    const refreshLeftSidebar = () => {\r\n        setNewServer(!newServer);\r\n    }\r\n    //Refresh the items in the right sidebar.\r\n    const refreshRightSidebar = () => {\r\n        setNewUser(!newUser);\r\n    }\r\n\r\n    if (loading) {\r\n        return(\r\n            <div className=\"wrapper w-100 h-100 mw-100 mh-100\">\r\n                <Loading/>\r\n            </div>\r\n        )\r\n    } else if (loggedIn) {\r\n        return(\r\n            <div className=\"w-100 vh-100 container-fluid\">\r\n                <div className=\"row\">\r\n                    <div  className=\"col vh-100 border border-secondary full-height\">\r\n                        <LeftSidebar newServer={newServer} userId={userInfo._id}/>\r\n                    </div>\r\n                    <div className=\"overflow-auto col-8 vh-100 border border-secondary full-height\">\r\n                    \r\n                        <Routes>\r\n                            <Route path=\"/picpark\" element={<SplashPage/>}/>\r\n                            <Route path=\"/picpark/s/:serverId\" element={<Main refreshLeftSidebar={refreshLeftSidebar}/>} />\r\n                            <Route path=\"/picpark/createServer\" element={ <ServerCreation refreshLeftSidebar={refreshLeftSidebar}/>}/>\r\n                            <Route path=\"/picpark/post/:serverId\" element={<PostCreation/>}/>\r\n                            <Route path=\"/picpark/v/:serverId/:postId\" element={<ViewPost />}/>\r\n                            <Route path=\"/picpark/profile/:userId\" element={<ViewProfile refreshRightSidebar={refreshRightSidebar}/>}/>\r\n                            <Route path=\"/picpark/serverInfo/:serverId\" element={<ViewServer refreshLeftSidebar={refreshLeftSidebar}/>}/>\r\n                        </Routes>\r\n\r\n                    </div>\r\n                    <div  className=\"col vh-100 border border-secondary\">\r\n                        <RightSidebar newUser={newUser} userInfo={userInfo} logoutCallback={logout}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else {\r\n        return(\r\n            <div className=\"wrapper w-100 h-100\">\r\n                <Login verifyAuth={verifyAuth}/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n} \r\n\r\nexport default App;","//Written by Karl Pollock, 2022.\n//KarlPollock91@gmail.com\n//www.karlpollock.com\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/main/App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport { BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.querySelector('#root'));\n"],"sourceRoot":""}