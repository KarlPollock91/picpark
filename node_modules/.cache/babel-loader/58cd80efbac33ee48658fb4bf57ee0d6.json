{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KarlP\\\\new-app\\\\client\\\\src\\\\components\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport UploadBar from './UploadBar';\nimport ImageThumbnail from './ImageThumbnail';\nimport './css/Main.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main(props) {\n  _s();\n\n  const [serverDisplay, setServerDisplay] = useState();\n  const [imageThumbnails, setImageThumbnails] = useState([]);\n  const [uploadBar, setUploadBar] = useState();\n  useEffect(() => {\n    console.log(props.currentServerId);\n\n    if (props.currentServerId != null) {\n      fetchData();\n    } else {\n      setServerDisplay( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No current server. Try joining one you filthy animal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 30\n      }, this));\n    }\n  }, []); //Retrieve files from the server\n\n  const fetchData = () => {\n    //console.log(localStorage.getItem(\"authToken\"));\n    axios.get(`http://localhost:5000/files/getImages/${props.currentServerId}`, {\n      headers: {\n        \"x-access-token\": localStorage.getItem(\"authToken\")\n      }\n    }).then(res => {\n      let newThumbnails = [];\n      res.data.map((el, i) => {\n        newThumbnails.push( /*#__PURE__*/_jsxDEV(ImageThumbnail, {\n          id: el.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 36\n        }, this));\n      });\n      setImageThumbnails([...imageThumbnails, ...newThumbnails]);\n      setServerDisplay(imageThumbnails);\n      setUploadBar( /*#__PURE__*/_jsxDEV(UploadBar, {\n        newFileCallback: addedNewFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 26\n      }, this));\n    });\n  }; //Callback to display new files when they are uploaded by the user.\n\n\n  const addedNewFile = id => {\n    setImageThumbnails([...imageThumbnails, /*#__PURE__*/_jsxDEV(ImageThumbnail, {\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 49\n    }, this)]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row gy-4 main-grid mx-auto pt-3\",\n      children: serverDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), uploadBar]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"jp1PKqkIn+kuZUUvLNIrtM9hOKY=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/KarlP/new-app/client/src/components/Main.js"],"names":["React","useState","useEffect","UploadBar","ImageThumbnail","axios","Main","props","serverDisplay","setServerDisplay","imageThumbnails","setImageThumbnails","uploadBar","setUploadBar","console","log","currentServerId","fetchData","get","headers","localStorage","getItem","then","res","newThumbnails","data","map","el","i","push","id","addedNewFile"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEjB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,EAAlD;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,EAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,eAAlB;;AACA,QAAIT,KAAK,CAACS,eAAN,IAAyB,IAA7B,EAAmC;AAC/BC,MAAAA,SAAS;AACZ,KAFD,MAEO;AACHR,MAAAA,gBAAgB,eAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAD,CAAhB;AACH;AACJ,GAPQ,EAON,EAPM,CAAT,CANiB,CAejB;;AACA,QAAMQ,SAAS,GAAG,MAAM;AACpB;AACAZ,IAAAA,KAAK,CAACa,GAAN,CAAW,yCAAwCX,KAAK,CAACS,eAAgB,EAAzE,EAA4E;AAACG,MAAAA,OAAO,EAChF;AACA,0BAAkBC,YAAY,CAACC,OAAb,CAAqB,WAArB;AADlB;AADwE,KAA5E,EAKCC,IALD,CAKOC,GAAD,IAAS;AACX,UAAIC,aAAa,GAAG,EAApB;AACAD,MAAAA,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAa,CAACC,EAAD,EAAKC,CAAL,KAAW;AACpBJ,QAAAA,aAAa,CAACK,IAAd,eAAmB,QAAC,cAAD;AAAgB,UAAA,EAAE,EAAEF,EAAE,CAACG;AAAvB;AAAA;AAAA;AAAA;AAAA,gBAAnB;AACH,OAFD;AAGAnB,MAAAA,kBAAkB,CAAC,CAAC,GAAGD,eAAJ,EAAqB,GAAGc,aAAxB,CAAD,CAAlB;AACAf,MAAAA,gBAAgB,CAACC,eAAD,CAAhB;AACAG,MAAAA,YAAY,eAAC,QAAC,SAAD;AAAW,QAAA,eAAe,EAAEkB;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAD,CAAZ;AACH,KAbD;AAcH,GAhBD,CAhBiB,CAkCjB;;;AACA,QAAMA,YAAY,GAAID,EAAD,IAAQ;AACzBnB,IAAAA,kBAAkB,CAAC,CAAC,GAAGD,eAAJ,eAAqB,QAAC,cAAD;AAAgB,MAAA,EAAE,EAAEoB;AAApB;AAAA;AAAA;AAAA;AAAA,YAArB,CAAD,CAAlB;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA,gBACKtB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKI,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA/CQN,I;;KAAAA,I;AAiDT,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport UploadBar from './UploadBar'\r\nimport ImageThumbnail from './ImageThumbnail'\r\nimport './css/Main.css'\r\nimport axios from 'axios'\r\n\r\nfunction Main(props) {\r\n\r\n    const [serverDisplay, setServerDisplay] = useState();\r\n    const [imageThumbnails, setImageThumbnails] = useState([]);\r\n    const [uploadBar, setUploadBar] = useState();\r\n\r\n    useEffect(() => {\r\n        console.log(props.currentServerId);\r\n        if (props.currentServerId != null) {\r\n            fetchData();\r\n        } else {\r\n            setServerDisplay(<div>No current server. Try joining one you filthy animal</div>);\r\n        }\r\n    }, []);\r\n\r\n    //Retrieve files from the server\r\n    const fetchData = () => {\r\n        //console.log(localStorage.getItem(\"authToken\"));\r\n        axios.get(`http://localhost:5000/files/getImages/${props.currentServerId}`, {headers: \r\n            {\r\n            \"x-access-token\": localStorage.getItem(\"authToken\")\r\n            }\r\n        })\r\n        .then((res) => {\r\n            let newThumbnails = [];\r\n            res.data.map((el, i) => {\r\n                newThumbnails.push(<ImageThumbnail id={el.id}/>);\r\n            });\r\n            setImageThumbnails([...imageThumbnails, ...newThumbnails]);\r\n            setServerDisplay(imageThumbnails);\r\n            setUploadBar(<UploadBar newFileCallback={addedNewFile}/>)\r\n        });\r\n    }\r\n\r\n    //Callback to display new files when they are uploaded by the user.\r\n    const addedNewFile = (id) => {\r\n        setImageThumbnails([...imageThumbnails, <ImageThumbnail id={id}/>]);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"row gy-4 main-grid mx-auto pt-3\">\r\n                {serverDisplay}\r\n            </div> \r\n            {uploadBar}\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}